
v-----------------------Background---------------------------------------------v

The counter.c program generates tasks within a while loop
using a single thread within a parallel region, like this:


    #pragma omp parallel    //Generic task loop generation
    {
       #pragma omp single
       while(){
          #pragma omp task
          {
            ...
          } //end task

          cntr++;

       }    //end single
    }       //end parallel



This is very unlike a worksharing loop that gathers the team of
threads to split up the iterations as chunks among the threads:

    #pragma omp parallel   //Generic worksharking loop
    {
       ...
       #pragma omp do
       for(i=0;i<n;i++){
       ...
       }
    }

In a while loop that generates tasks, a counter/pointer value is needed 
for providing a different counter or pointer value for each task.  Unlike a
worksharing loop that has a default private index value for each set of chunks,
the tasks within a generating loop needs the counter or pointer not at the time
the task is generated, but at the time it is executed. (Remember, tasks are
thrown on a queue to be executed later.) 

       Hence, it is often necessary to make
       variables firstprivate for the task (region). 

ALSO, for the task region, variables that are not shared within the parallel 
region, those that are private, become firstprivate by default.

^-----------------------Background---------------------------------------------^



------------------------Exercise---------------------------------------------

        For these exercises you should use 1 nodes:

        Frontera:   $ idev            -N 1 -tpn 56  For Tutorial Reservation

       Stampded2:   $ idev            -N 1 -tpn 48  For Tutorial Reservation
                    $ idev -p skx-dev -N 1 -tpn 48  Outside of Tutorial time

            SDSC:   $ srun -p debug   -N 1 --ntasks-per-node=24 -t 00:30:00 \
                                           --pty --wait=0 --export=ALL /bin/bash
            PSC:    $ interact        -N 1 --ntasks-per-node=28

Compute and run the counter.c/f90 code. It uses a counter variable (cntr) in the task block.

EX1
Compile and run "as is", the incorrect code:
    icc -fopenmp cntr1.c -o a.out.cntr1
    export OMP_NUM_THREADS=8
    a.out.cntr1

    Are the sequence of cntr values printed correctly?  ___________NO
    Why? ______________________________________________Race condition


Copy the cntr1.c to cntr1_ok.c.
Correct the problem, and rerun the code to convince yourself that your correction
will make it run as intended.


    icc -fopenmp cntr1_ok.c -o a.out.cntr1_ok
    export OMP_NUM_THREADS=8
    a.out.cntr1_ok

    Are the sequence of cntr values printed correctly?  ___________YES



EX2
Look at the code in cntr2.c.

   What is thread 0 doing different in the task? ___ thread 0 waits 1sec 

Compile and run "as is", the incorrect code:
    icc -fopenmp cntr2.c -o a.out.cntr2
    export OMP_NUM_THREADS=8
    a.out.cntr2

    What are the expected values of cntr for thread 0 ?  0 (the final value of the while loop)

Copy cntr2.c to cntr2_ok.c.
Correct the problem, and rerun the code to convince yourself that your correction
will make it run as intended.
    icc -fopenmp cntr2_ok.c -o a.out.cntr2_ok
    export OMP_NUM_THREADS=8
    a.out.cntr2_ok


EX3
Look at the code in cntr3.c.  

   What is the conditional statement in the task doing? ______for i equal to 50 sleep

   Why is the variable i automatically firstprivate?    ___ because it is private in the parallel region

Compile and run "as is", the incorrect code:
    icc -fopenmp cntr3.c -o a.out.cntr3
    export OMP_NUM_THREADS=8
    a.out.cntr3

    What would be a reasonable incorrect value of cntr for i = 50 ? __ 0

Copy cntr3.c to cntr3_ok.c.
Correct the problem, and rerun the code to convince yourself that your correction
will make it run as intended.
    icc -fopenmp cntr3_ok.c -o a.out.cntr3_ok
    export OMP_NUM_THREADS=8
    a.out.cntr3_ok

   What is the expected value for i = 50 now ? __ 50
