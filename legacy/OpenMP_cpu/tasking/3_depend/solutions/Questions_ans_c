----------------------Background-----------------------------------------------

Task Dependences in OpenMP are relative to previously generated sibling tasks.
For instance, in a while loop

       #pragma omp single
       while(){
          #pragma omp task depend(...)
          {
            ...
          } //end task

The 1st task generated has no dependence.
The 2nd task generated can only have a dependence on task 1 (task generated by 1st iteration).
The 3nd task generated can only have a dependence on task 1 and 2. (task created by 1st and 2nd iter.)
etc.


Potential dependences are discovered from identical variables (actually addresses
of the variable) found in the "list" of the depend clause.  Think of them as
identifiers.  The type of dependence is set by the dependence-type, and is 
characterized as IN(Read), OUT(Write) and INOUT(ReadWrite), as illustrated in
the syntax:

          depend(dependence-type:list)

          where dependence-type = (IN/OUT/INOUT)
          list = list of variable.

The basic dependency that can occur for two subsequent task generations are:

       RaW (Read after Write)
         ... omp task depend(OUT:x)
             foo(x)
         ... omp task depend( IN:x)
             foo(x)

       WaR (Write after Read)
         ... omp task depend( IN:x)
             foo(x)
         ... omp task depend(OUT:x)
             foo(x)

       WaW (Write after Write) 
         ... omp task depend(OUT:x)
             foo(x)
         ... omp task depend(OUT:x)
             foo(x)

       RaR (Read after Read)
         ... omp task depend(OUT:x)
             foo(x)
         ... omp task depend(OUT:x)
             foo(x)

Only the second task will depend upon the first task. (The first task has no
predecessor.) Only for the RaR case will the tasks be allowed to run simultaneously.
Certainly the dependencies get more complicated when there is a generator loop; but
here we test the 4 basic dependences in an exercise.

----------------------Background-----------------------------------------------

----------------------Exercise-------------------------------------------------

EXERCISE 1
1.) READ each of the codes.

2.) Substitute the appropriate dependence type for the <???> characters in
the depend clauses to make raw, rar, war, and waw dependence, according
to the name of the file. (files: raw.c rar.c war.c waw.c)

3.) Compile and execute them.

Compile with:
   icc   -fopenmp raw.c -o a.out.raw
   icc   -fopenmp rar.c -o a.out.rar
   icc   -fopenmp war.c -o a.out.war
   icc   -fopenmp waw.c -o a.out.waw

   For raw, war and waw, what is the expected printed value?  2 _________
   For the  rar case what is the expected printed value?      1 or 2 _________

   export OMP_NUM_THREADS=1  #this may take a while to finish on KNL
   for i in `seq 1 50`; do ./a.out.raw; done
   for i in `seq 1 50`; do ./a.out.rar; done

   Convince yourself that that RaR case is "always"
   printing 2 here (for 1 thread), execute: 

        for i in `seq 1 1000`; do ./a.out.rar; done | grep 1

   What do you think is the reason why we only see a value of 2
   for the RaR case here?  Immediate Execution_________________________.
   (Hint immediate execution versus deferred.)

   Now try this with 2 threads.

   export OMP_NUM_THREADS=2
   for i in `seq 1 1000`; do ./a.out.rar; done | grep 1

   *** Here the tasks in the rar program will most likely
       run as deferred tasks. They can run in ANY order
       and probably concurrently (as deferred tasks with
       a team of 2 threads).
       This is when you will definitely see an ordering 
       difference or even a __RACE____ condition
       for the one task that reads and the other that writes.

EXERCISE 2 (OPTIONAL)
   Someone thought it would be a good idea to put all of
   the tests in a single code, depend_all.c, and 
   execute it for each case, after re-initializing x.
   Hmm? The rules appear not to be behaving correctly, though!
   You should only see return values of 1 for RaR dependences.
   (But 1's appear for other cases.)


   icc   -fopenmp depend_all_broke.c   -o a.out.all_broke

   export OMP_NUM_THREADS 2
   for i in `seq 1 1000`; do ./a.out.all_broke; done 
   or better
   for i in `seq 1 1000`; do ./a.out.all_broke; done | grep -v RaR | grep 1
                                                                ^         ^
                             filter RaR out (can be 1 or 2) ----|         |
                             Find any others that come up a 1-------------|


   

   Correct the problem in the code, and show that the
   dependence tests will work correctly.  (Hint: think
   about race conditions when setting a shared variable.
   One easy way to fix this is with a barrier after the single region.)
        #pragma omp barrier
   Copy depend_all_broke.c depend_all_ok.c  and include the barriers.

   icc   -fopenmp depend_all_ok.c   -o a.out.all_ok
   export OMP_NUM_THREADS=2

   for i in `seq 1 1000`; do ./a.out.all_ok; done 
   or better
   for i in `seq 1 1000`; do ./a.out.all_ok; done | grep -v RaR | grep 1


Answers provided in the hidden .answers directory.  Enjoy :)
