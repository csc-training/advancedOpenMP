# Using class methods with dynamic scope (with worksharing)

## BACKGROUND
Non-static class methods can executed in parallel, and their private members
may be used in a  private clause.

## Exercises
1.)
    Look over the code.
    Note, the  ifndef.  
        a.) if     compiled with -fopenmp nothing is printed.
        a.) if not compiled with -fopenmp the loop index is printed
  1.) Compile with/without  -fopenmp and run the two cases.

  2.) Now parallize the loop by putting c.class_fun(); in a parallel
      region (#pragma omp parallel).  class_func() is executed by each
      thread.  Do this with 4 threads (num_threads(#) or 
      export OMP_NUM_THREADS=# // TODO 1
  3.) Make the loop in class_fun() a worksharing loop, (#pragma omp for). //TODO 2
  4.) In the work function inlude else statement to also print the thread
      number after the index with: // TODO 3

        stringstream one_string;
        one_string << i << " from thread " << omp_get_thread_num()<<'\n';
        cout << one_string.xxx();
                           ^^^^ What goes here?

   5.) Compile (debug) and run.
*/
