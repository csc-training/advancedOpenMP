* First experiment: 28 threads, 28 places 
  ----------------

#unset OpenMP Affinity variables with the "unset" command.
#(they a probably set from the previous experiment)

    unset OMP_PROC_BIND
    unset OMP_PLACES
    unset OMP_DISPLAY_ENV

    export OMP_NUM_THREADS=28
    export OMP_PLACES=cores

    amask_omp

Would it be appropriate to say that any thread can run anywhere?
YES Each thread has all bit in mask set to 1

thrd |    0    |   10    |   20    |
0000 0123456789012345678901234567
0001 0123456789012345678901234567
0002 0123456789012345678901234567
...

Now, let's bind each thread to a single core.

    export OMP_NUM_THREADS=28
    export OMP_PLACES=cores

    amask_omp
thrd |    0    |   10    |   20    |
0000 0---------------------------
0001 --------------4-------------
0002 -1--------------------------
0003 ---------------5------------

0022 -----------1----------------
0023 -------------------------5--
0024 ------------2---------------
0025 --------------------------6-
0026 -------------3--------------
0027 ---------------------------7

    Note that each thread_number in the sequence 0, ... 27
    is assigned to a corespondingly numbered proc-id (core number).

    Note: core-ids for socket 0 are 0-13
    Note: core-ids for socket 1 are 14-27

    What does the pattern tell you about the OMP thread-id assignments?
    __________________________

**** NOTE: The sequence of assignment for cores is 0,14,1,15,2,16,...
           This make it so that threads are alternated between the
           sockets.


* Second experiment (optional):  Use 1/2 the threads (14) and spread out
  -----------------

     export OMP_NUM_THREADS=14
     export OMP_PLACES=cores
     export OMP_PROC_BIND=spread
     amask_omp
     export OMP_PROC_BIND=close
     amask_omp

  Question:  Does it seam that the close and spread
             are not working correctly?

Since the sequence of cores is: 0,14,1,15,2,16,...
spread will use 0,1,2,3,...
close  will use 0,14,1,15,...

  Now try this:
     export OMP_PLACES='{0,1}:14:2'
     amask_omp

    a.)  Actually, it appears the spread doesn't work right
         on bridges.  Thread-id 0 should be assigned core 0, thread-id 1 to core 2, etc.
         For the sake of the next question, assume it has the expected behavior.
    b.)  What is the difference between these approaches.
         Does the places list allow "more" floating?

* Third  experiment: experiment with options
  ----------------


Get amask general help
Execute amask_omp  with -pf  (print fast)

amask_omp --help
amask_omp   
amask_omp  -pf
