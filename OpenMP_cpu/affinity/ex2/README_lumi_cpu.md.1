# places for sockets

## BACKGROUND

## Exercises
The lscpu command shows that there are 8 numa nodes:
  
NUMA node(s):          8
NUMA node0 CPU(s):     0-15,128-143
NUMA node1 CPU(s):     16-31,144-159
NUMA node2 CPU(s):     32-47,160-175
NUMA node3 CPU(s):     48-63,176-191
NUMA node4 CPU(s):     64-79,192-207
NUMA node5 CPU(s):     80-95,208-223
NUMA node6 CPU(s):     96-111,224-239
NUMA node7 CPU(s):     112-127,240-255

## Exercises

node0='{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}'
node1='{16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}'
node2='{32,33,34,35,36,37,38,39,40,41,42,43,44 45,46,47}'
node3='{48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}'
export OMP_PLACES="$node0,$node1,$node2,$node3"


export OMP_PLACES="{0}:16,{16}:16,{32}:16,{48}:16"

1.)
    Convince yourself that 
    processors 0-63   are on socket 0 (core id 0-63)
    processors 64-127 are on socket 1 (core id 64-127)

    by looking at the /proc/cpuinfo file 
    (look around at the first location of "physical id     : 1" 
    you will see procssor 63 just before it, and it's value is 64)


    processors 128-191 are on socket 0 (core id 0-63)
    processors 192-255 are on socket 1 (core id 64-127)

    What does "numactl -H"  tell you about the numa nodes?
    (Hint:  do numa nodes 0-3 all have about the same "distance"
    from each other?)

    So, to a rough approximation:
    processors 0-63   and 128-191 (core ids 0-63) can be considered as 1 numa node, and
    processors 64-127 and 192-225 (core ids 64-127) can be considered as another numa node, and

    
* First experiment: 8 threads with 8 places; each place is 7 cores
1.)

``
     export OMP_NUM_THREADS=8

     soc1="{0,1,2,3,4,5,6},{14,16,18,20,22,24,26},{28,30,32,34,36,38,40},{42,44,46,48,50,52,54}"
     soc2="{1,3,5,7,9,11,13},{15,17,19,21,23,25,27},{29,31,33,35,37,39,41},{43,45,47,49,51,53,55}"

     export OMP_PLACES="$soc1,$soc2"
     export OMP_PROC_BIND=spread                  
                                             
                            These are core numbers.
                            All even cores #'s are on socket 0, all odd core #'s are on socket 1
                            They are also called proc-ids.
                                          |
                                          v
            '{0,2,4,6,8,10,12},{14,16,18,20,22,24,26},{28,30,32,34,36,38,40},{42,44,46,48,50,52,54}...
              ^             ^
                 1st place.  
                 Threads id 0 on either core 0, core 2, core 4 , ... , or core 12 (on socket 0)

             This list could have been generated by interal notaion:
             export OMP_PLACES='{0,2,4,6,8,10,12}:4:14,{1,3,5,7,9,11,13}:4:14'
                                                  ^  ^
                                (makes 4  places, with stride 14:
                                 take each value in the base and add 14, { 4,16,18,20,22,24,26}
                                 take each value in the base and add 28, {28,30,32,34,36,38,40}
                                 take each value in the base and add 42, {42,44,46,48,50,52,54}
                                )
                                Do the same for the odd-number intervals: {1,3,5,7,9,11,13}:4:14

               
     amask_omp    # since Hyperthreading is not on, kernel view is the default

   1a.) How many cores can each thread float on?  ____
   1b.) If you wanted to use the first 24 even cores for 8 threads (3 cores/thread)
        what would be the interval notation?     ___________________ 



       export OMP_PLACES='{0,2,4,6,8,10,12}:4:14,{1,3,5,7,9,11,13}:4:14'
                  # would {0,4,2,6,8,10,12}:4:14,{1,5,3,7,9,11,13}:4:14   (w.o. quotes) work?  ______
       amask_omp
   

   1c.) What is the pattern? ___________________________



* Second experiment: increase to 16 threads
  -----------------
export OMP_NUM_THREADS=16

amask_omp 

   2a.) Are the places "oversubscribed".           ____________________
   2b.) How are the additional 8 threads assigned? ____________________


* Third experiment:  explore OMP_DISPLAY_ENV
  -----------------
export OMP_NUM_THREADS=4
export OMP_DISPLAY_ENV=TRUE
amask_omp 

   4a.) What does DISPLAY_ENV do?         _________________
   4b.) Set places to something incorrect, and run again e.g.

      e.g. use this incorrect syntax (forgot to separate with commas):
     export OMP_PLACES='{0,1,2,3}{4,5,6,7}{8,9,10,11}{12,13,14,15}{16,17,18,19}{20,21,22,23}'

       What does the OMP_PLACES variable appear to be set at? _________________

